'use strict';

const Joi = require('joi');
const DriveSchema = {
    id: (
        Joi.string().description('Drive unique id.').notes('Stripped from payload if present.').strip()
    ),
    created_at: (
        Joi.date().description('The date the drive was created.').notes('Stripped from payload if present.').strip()
    ),
    requester_id: (
        Joi.string().description('The unique id of the Kiosk who requested this drive.').example('[UUID]')
    ),
    driver_id: (
        Joi.string().description('The unique id of the Driver who requested this drive.').example('[UUID]')
    ),
    customer: (
        Joi.object().keys({
                phone: (
                    Joi.string().description('The contact phone number of the customer who ordered the drive.').example('555-555-5555')
                ),
                email: (
                    Joi.string().description('The contact email of the customer who ordered the drive.').example('customer@mail.com')
                ),
            })
    ),
    status: (
        Joi.string().valid('unpaid', 'available', 'accepted', 'loading', 'driving', 'delivered', 'refunded').description('The current status of the drive.').example('available')
    ),
    start_time: (
        Joi.date().description('The date time of when the driver started the drive.').example('2016-12-09T21:52:57.900Z')
    ),
    end_time: (
        Joi.date().description('The date time of when the driver ended the drive.').example('2016-12-09T21:53:47.508Z')
    ),
    price: (
        Joi.number().positive().description('The calculated total price charged to the customer for the drive.').example(121.35)
    ),
    payment: (
        Joi.object().keys({
                charge_id: (
                    Joi.string().description('The unique id of the charge generated by the Stripe API').example('[UUID]')
                ),
                transfer_ids: (
                    Joi.array().items(Joi.string()).description('The unique ids of the transfer ids generated by the Stripe API').example(['[UUID]', '[UUID]'])
                ),
            })
    ),
    drive_progress_confirmation: (
        Joi.object().keys({
            pickup_arrival: Joi.string(),
            pickup_loaded: Joi.string(),
            dropoff: Joi.string()
        })
    ),
    route: (
        Joi.object().keys({
                origin: (
                    Joi.object().keys({
                            name: (
                                Joi.string().description('The origin address name.').example('Best Buy')
                            ),
                            street: (
                                Joi.string().description('The origin address street.').example('412 Lincoln Ave')
                            ),
                            city: (
                                Joi.string().description('The origin address city.').example('Sunvilee')
                            ),
                            state: (
                                Joi.string().description('The origin address state.').example('AL')
                            ),
                            zip: (
                                Joi.string().description('The origin address postal code.').example('56993')
                            ),
                            geo: (
                                Joi.object().description('The origin address geo data.').notes('If present will be stripped from the payload').strip()
                            ),
                        })
                ),
                destination: (
                    Joi.object().keys({
                            name: (
                                Joi.string().description('The destination address name.').example('Best Buy')
                            ),
                            street: (
                                Joi.string().description('The destination address street.').example('412 Lincoln Ave')
                            ),
                            city: (
                                Joi.string().description('The destination address city.').example('Sunvilee')
                            ),
                            state: (
                                Joi.string().description('The destination address state.').example('AL')
                            ),
                            zip: (
                                Joi.string().description('The destination address postal code.').example('56993')
                            ),
                            geo: (
                                Joi.object().description('The destination address geo data.').notes('If present will be stripped from the payload').strip()
                            ),
                        })
                ),
            })
    ),
    items: (
        Joi.array().items(
            Joi.object().keys({
                name: (
                    Joi.string().description('The name of an item to transported').example('Queen Bed')
                ),
                quantity: (
                    Joi.number().description('The number of this item.').example(1)
                ),
                height: (
                    Joi.number().description('The height of the item in inches.').example(42)
                ),
                width: (
                    Joi.number().description('The width of the item in inches.').example(54)
                ),
                length: (
                    Joi.number().description('The length of the item in inches.').example(72)
                ),
                weight: (
                    Joi.number().description('The weight of the item in inches.').example(100)
                ),
                value: (
                    Joi.number().description('The estimated value of the item').example(325)
                ),
                notes: (
                    Joi.any().description('Notes for this item').example('2 Parts, a detchable headboard and main frame.')
                ),
                images: Joi.array().items(Joi.string()).description('An array of unique ids.').example(["[UUID]", "[UUID]", "[UUID]"])
            })
        )
    ),
    support: Joi.object().keys({
        driver_ext: Joi.string().description('The driver twilio extension').example('48741'),
        requester_ext: Joi.string().description('The kiosk twilio extension').example('48742'),
        customer_ext: Joi.string().description('The customer twilio extension').example('48743')
    }),
    support_calls: Joi.array()
}

module.exports.create = {
    auth: {
        scope: ['requester', 'admin']
    },
    validate: {
        payload: DriveSchema
    },
    tags: ['api'],
    handler: function(request, reply) {
        let drive = request.payload;
        drive.requester_id = drive.requester_id || request.auth.credentials.id;

        this.core.drive.getGeoPoints(drive)
        .then((drive) => {
            drive = new this.db.models.Drive(drive);

            this.utils.model.validate(drive);

            this.core.model('Drive').create(drive)
            .then((drive) => reply(drive))
        })
        .catch((err) => reply(err));
    }
}

module.exports.update = {
    validate: {
        payload: DriveSchema,
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function(request, reply) {
        let payload = request.payload;
        payload.id = request.params.drive_id;
        
        this.core.model('Drive').findById(payload.id, {})
        .then((drive) => this.core.drive.getGeoPoints(Object.assign(drive, payload )))
        .then((drive) => {
            drive = new this.db.models.Drive(drive);

            this.utils.model.validate(drive);

            this.core.model('Drive').update(drive)
            .then((drive) => reply(drive))
        })
        .catch((err) => reply(err));
    }
}

module.exports.remove = {
    plugins : {
        policies: ['isAdminOrOwner']
    },
    validate: {
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function(request, reply) {
        let id = request.params.drive_id;

        this.core.model('Drive').remove(id)
        .then((res) => reply(res))
        .catch((err) => reply(err));
    }
}

module.exports.getById = {
    validate: {
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        },
        query: {
            populate: Joi.string().required().description('Option to populate category relationships. Options: ["driver", "requester", "support_calls"]').example('?populate=driver,requester')
        }
    },
    tags: ['api'],
    handler: function(request, reply) {
        let id = request.params.drive_id;
        let relations = request.query.populate;

        this.core.model('Drive').findById(id, {
            populate: this.utils.model.populate(relations)
        })
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.getByUser = {
    validate: {
        params: {
            user_id: Joi.string().required().description('The unique id of the user to fetch drives related to.').example('[UUID]')
        },
        query: {
            populate: Joi.string().required().description('Option to populate category relationships. Options: ["driver", "requester", "support_calls"]').example('?populate=driver,requester')
        }
    },
    tags: ['api'],
    handler: function(request, reply) {
        let relations = request.query.populate;
        let user = request.params.user_id;

        this.core.drive.getByUser(user, {
            populate: this.utils.model.populate(relations)
        })
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.getAll = {
    validate: {
        query: {
            populate: Joi.string().required().description('Option to populate category relationships. Options: ["driver", "requester", "support_calls"]').example('?populate=driver,requester')
        }
    },
    tags: ['api'],
    handler: function(request, reply) {
        let relations = request.query.populate;

        this.core.model('Drive').getAll({
            populate: this.utils.model.populate(relations)
        })
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.filterBy = {
    validate: {
        query: {
            populate: Joi.string().required().description('Option to populate category relationships. Options: ["driver", "requester", "support_calls"]').example('?populate=driver,requester')
        }
    },
    tags: ['api'],
    handler: function(request, reply) {
        let relations = request.query.populate;
        let query = request.payload;

        this.core.model('Drive').query(query, {
            populate: this.utils.model.populate(relations)
        })
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.estimate = {
    validate: {
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function (request, reply) {
        let id = request.params.drive_id;
        let relations = request.query.populate;

        this.core.model('Drive').findById(id, {
            populate: this.utils.model.populate(relations)
        })
        .then((drive) => this.core.drive.getTripDistance(drive))
        .then((data) => this.core.drive.getEstimate(data))
        .then((estimate) => reply(estimate))
        .catch((err) => {
            reply(err)
        });
    }
}

module.exports.accept = {
    validate: {
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function (request, reply) {
        let id = request.params.drive_id;
        let drive = request.payload || {};
        let driver_id = drive.driver_id || request.auth.credentials.id;

        this.core.model('Drive').update({ id, driver_id, status: 'accepted' })
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.charge = {
    validate: {
        payload: {
            source: Joi.any().required().description('A Stripe Card Object').notes('https://stripe.com/docs/api#card_object')
        },
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function (request, reply) {
        let id = request.params.drive_id;
        let source = request.payload.source;

        this.core.model('Drive').findById(id,  {
            populate: {
                requester: true,
                driver: true
            }
        })
        .then((drive) => this.core.stripe.charges.create(drive, source))
        .then((charge) => {
            let drive = {
                id: id,
                status: 'available',
                payment: {
                    charge_id: charge.id,
                }
            }

            return this.core.model('Drive').update(drive)
        })
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.process = {
    validate: {
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function (request, reply) {
        let id = request.params.drive_id;

        this.core.model('Drive').findById(id,  {
            populate: {
                requester: true,
                driver: true
            }
        })
        .then((drive) => this.core.stripe.transfers.create(drive))
        .then((transfers) => {
            let ids = [];
            transfers.map((transfer) => ids.push(transfer.id))

            return this.core.model('Drive').update({
                id: id,
                status: 'delivered',
                payment: {
                    transfer_ids: ids
                }
            })
        })
        .then((drive) => this.core.support.extensions.releaseExtensions(drive))
        .then((drive) => reply(drive))
        .catch((err) => reply(err));
    }
}

module.exports.refund = {
    auth: {
        scope: ['admin']
    },
    validate: {
        params: {
            drive_id: Joi.string().required().description('The unique id of the drive.').example('[UUID]')
        }
    },
    tags: ['api'],
    handler: function (request, reply) {
        let id = request.params.drive_id;

        this.core.model('Drive').findById(id,  {
            populate: {
                requester: true,
                driver: true
            }
        })
        .then((drive) => this.core.stripe.refunds.create(drive))
        .then((transfers) => {
            return this.core.model('Drive').update({
                id: id,
                status: 'refunded'
            })
        })
        .then((refund) => reply(refund))
        .catch((err) => reply(err));
    }
}
